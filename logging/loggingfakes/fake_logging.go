// Code generated by counterfeiter. DO NOT EDIT.
package loggingfakes

import (
	"sync"

	"github.com/cloudfoundry-community/splunk-firehose-nozzle/logging"
)

type FakeLogging struct {
	ConnectStub        func() error
	connectMutex       sync.RWMutex
	connectArgsForCall []struct{}
	connectReturns     struct {
		result1 error
	}
	connectReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	ShipEventsStub        func(map[string]interface{}, string) error
	shipEventsMutex       sync.RWMutex
	shipEventsArgsForCall []struct {
		arg1 map[string]interface{}
		arg2 string
	}
	shipEventsReturns struct {
		result1 error
	}
	shipEventsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogging) Connect() error {
	fake.connectMutex.Lock()
	ret, specificReturn := fake.connectReturnsOnCall[len(fake.connectArgsForCall)]
	fake.connectArgsForCall = append(fake.connectArgsForCall, struct{}{})
	fake.recordInvocation("Connect", []interface{}{})
	fake.connectMutex.Unlock()
	if fake.ConnectStub != nil {
		return fake.ConnectStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.connectReturns.result1
}

func (fake *FakeLogging) ConnectCallCount() int {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return len(fake.connectArgsForCall)
}

func (fake *FakeLogging) ConnectReturns(result1 error) {
	fake.ConnectStub = nil
	fake.connectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogging) ConnectReturnsOnCall(i int, result1 error) {
	fake.ConnectStub = nil
	if fake.connectReturnsOnCall == nil {
		fake.connectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.connectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogging) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.closeReturns.result1
}

func (fake *FakeLogging) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeLogging) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogging) CloseReturnsOnCall(i int, result1 error) {
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogging) ShipEvents(arg1 map[string]interface{}, arg2 string) error {
	fake.shipEventsMutex.Lock()
	ret, specificReturn := fake.shipEventsReturnsOnCall[len(fake.shipEventsArgsForCall)]
	fake.shipEventsArgsForCall = append(fake.shipEventsArgsForCall, struct {
		arg1 map[string]interface{}
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ShipEvents", []interface{}{arg1, arg2})
	fake.shipEventsMutex.Unlock()
	if fake.ShipEventsStub != nil {
		return fake.ShipEventsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.shipEventsReturns.result1
}

func (fake *FakeLogging) ShipEventsCallCount() int {
	fake.shipEventsMutex.RLock()
	defer fake.shipEventsMutex.RUnlock()
	return len(fake.shipEventsArgsForCall)
}

func (fake *FakeLogging) ShipEventsArgsForCall(i int) (map[string]interface{}, string) {
	fake.shipEventsMutex.RLock()
	defer fake.shipEventsMutex.RUnlock()
	return fake.shipEventsArgsForCall[i].arg1, fake.shipEventsArgsForCall[i].arg2
}

func (fake *FakeLogging) ShipEventsReturns(result1 error) {
	fake.ShipEventsStub = nil
	fake.shipEventsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogging) ShipEventsReturnsOnCall(i int, result1 error) {
	fake.ShipEventsStub = nil
	if fake.shipEventsReturnsOnCall == nil {
		fake.shipEventsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.shipEventsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogging) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.shipEventsMutex.RLock()
	defer fake.shipEventsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogging) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logging.Logging = new(FakeLogging)
